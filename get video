{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"get video","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNuqPF+LERfZvJ6Jfiveo2H"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"UmcLjsCmfbdY"},"source":["import cv2\n","import numpy as np\n","import logging\n","import math\n","import datetime\n","import sys\n","\n","_SHOW_IMAGE = False\n","\n","\n","class HandCodedLaneFollower(object):\n","\n","    def __init__(self, car=None):\n","        logging.info('Creating a HandCodedLaneFollower...')\n","        self.car = car\n","        self.curr_steering_angle = 90\n","\n","    def follow_lane(self, frame):\n","        # Main entry point of the lane follower\n","        show_image(\"orig\", frame)\n","\n","        lane_lines, frame = detect_lane(frame)\n","        final_frame = self.steer(frame, lane_lines)\n","\n","        return final_frame\n","\n","    def steer(self, frame, lane_lines):\n","        logging.debug('steering...')\n","        if len(lane_lines) == 0:\n","            logging.error('No lane lines detected, nothing to do.')\n","            return frame\n","\n","        new_steering_angle = compute_steering_angle(frame, lane_lines)\n","        self.curr_steering_angle = stabilize_steering_angle(self.curr_steering_angle, new_steering_angle, len(lane_lines))\n","\n","        if self.car is not None:\n","            self.car.front_wheels.turn(self.curr_steering_angle)\n","        curr_heading_image = display_heading_line(frame, self.curr_steering_angle)\n","        show_image(\"heading\", curr_heading_image)\n","\n","        return curr_heading_image\n","\n","\n","############################\n","# Frame processing steps\n","############################\n","def detect_lane(frame):\n","    logging.debug('detecting lane lines...')\n","\n","    edges = detect_edges(frame)\n","    show_image('edges', edges)\n","\n","    cropped_edges = region_of_interest(edges)\n","    show_image('edges cropped', cropped_edges)\n","\n","    line_segments = detect_line_segments(cropped_edges)\n","    line_segment_image = display_lines(frame, line_segments)\n","    show_image(\"line segments\", line_segment_image)\n","\n","    lane_lines = average_slope_intercept(frame, line_segments)\n","    lane_lines_image = display_lines(frame, lane_lines)\n","    show_image(\"lane lines\", lane_lines_image)\n","\n","    return lane_lines, lane_lines_image\n","\n","\n","def detect_edges(frame):\n","    # filter for blue lane lines\n","    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n","    show_image(\"hsv\", hsv)\n","    lower_blue = np.array([30, 40, 0])\n","    upper_blue = np.array([150, 255, 255])\n","    mask = cv2.inRange(hsv, lower_blue, upper_blue)\n","    show_image(\"blue mask\", mask)\n","\n","    # detect edges\n","    edges = cv2.Canny(mask, 200, 400)\n","\n","    return edges\n","\n","def detect_edges_old(frame):\n","    # filter for blue lane lines\n","    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n","    show_image(\"hsv\", hsv)\n","    for i in range(16):\n","        lower_blue = np.array([30, 16 * i, 0])\n","        upper_blue = np.array([150, 255, 255])\n","        mask = cv2.inRange(hsv, lower_blue, upper_blue)\n","        show_image(\"blue mask Sat=%s\" % (16* i), mask)\n","\n","\n","    #for i in range(16):\n","        #lower_blue = np.array([16 * i, 40, 50])\n","        #upper_blue = np.array([150, 255, 255])\n","        #mask = cv2.inRange(hsv, lower_blue, upper_blue)\n","       # show_image(\"blue mask hue=%s\" % (16* i), mask)\n","\n","        # detect edges\n","    edges = cv2.Canny(mask, 200, 400)\n","\n","    return edges\n","\n","\n","def region_of_interest(canny):\n","    height, width = canny.shape\n","    mask = np.zeros_like(canny)\n","\n","    # only focus bottom half of the screen\n","\n","    polygon = np.array([[\n","        (0, height * 1 / 2),\n","        (width, height * 1 / 2),\n","        (width, height),\n","        (0, height),\n","    ]], np.int32)\n","\n","    cv2.fillPoly(mask, polygon, 255)\n","    show_image(\"mask\", mask)\n","    masked_image = cv2.bitwise_and(canny, mask)\n","    return masked_image\n","\n","\n","def detect_line_segments(cropped_edges):\n","    # tuning min_threshold, minLineLength, maxLineGap is a trial and error process by hand\n","    rho = 1  # precision in pixel, i.e. 1 pixel\n","    angle = np.pi / 180  # degree in radian, i.e. 1 degree\n","    min_threshold = 10  # minimal of votes\n","    line_segments = cv2.HoughLinesP(cropped_edges, rho, angle, min_threshold, np.array([]), minLineLength=8,\n","                                    maxLineGap=4)\n","\n","    if line_segments is not None:\n","        for line_segment in line_segments:\n","            logging.debug('detected line_segment:')\n","            logging.debug(\"%s of length %s\" % (line_segment, length_of_line_segment(line_segment[0])))\n","\n","    return line_segments\n","\n","\n","def average_slope_intercept(frame, line_segments):\n","    \"\"\"\n","    This function combines line segments into one or two lane lines\n","    If all line slopes are < 0: then we only have detected left lane\n","    If all line slopes are > 0: then we only have detected right lane\n","    \"\"\"\n","    lane_lines = []\n","    if line_segments is None:\n","        logging.info('No line_segment segments detected')\n","        return lane_lines\n","\n","    height, width, _ = frame.shape\n","    left_fit = []\n","    right_fit = []\n","\n","    boundary = 1/3\n","    left_region_boundary = width * (1 - boundary)  # left lane line segment should be on left 2/3 of the screen\n","    right_region_boundary = width * boundary # right lane line segment should be on left 2/3 of the screen\n","\n","    for line_segment in line_segments:\n","        for x1, y1, x2, y2 in line_segment:\n","            if x1 == x2:\n","                logging.info('skipping vertical line segment (slope=inf): %s' % line_segment)\n","                continue\n","            fit = np.polyfit((x1, x2), (y1, y2), 1)\n","            slope = fit[0]\n","            intercept = fit[1]\n","            if slope < 0:\n","                if x1 < left_region_boundary and x2 < left_region_boundary:\n","                    left_fit.append((slope, intercept))\n","            else:\n","                if x1 > right_region_boundary and x2 > right_region_boundary:\n","                    right_fit.append((slope, intercept))\n","\n","    left_fit_average = np.average(left_fit, axis=0)\n","    if len(left_fit) > 0:\n","        lane_lines.append(make_points(frame, left_fit_average))\n","\n","    right_fit_average = np.average(right_fit, axis=0)\n","    if len(right_fit) > 0:\n","        lane_lines.append(make_points(frame, right_fit_average))\n","\n","    logging.debug('lane lines: %s' % lane_lines)  # [[[316, 720, 484, 432]], [[1009, 720, 718, 432]]]\n","\n","    return lane_lines\n","\n","\n","def compute_steering_angle(frame, lane_lines):\n","    \"\"\" Find the steering angle based on lane line coordinate\n","        We assume that camera is calibrated to point to dead center\n","    \"\"\"\n","    if len(lane_lines) == 0:\n","        logging.info('No lane lines detected, do nothing')\n","        return -90\n","\n","    height, width, _ = frame.shape\n","    if len(lane_lines) == 1:\n","        logging.debug('Only detected one lane line, just follow it. %s' % lane_lines[0])\n","        x1, _, x2, _ = lane_lines[0][0]\n","        x_offset = x2 - x1\n","    else:\n","        _, _, left_x2, _ = lane_lines[0][0]\n","        _, _, right_x2, _ = lane_lines[1][0]\n","        camera_mid_offset_percent = 0.02 # 0.0 means car pointing to center, -0.03: car is centered to left, +0.03 means car pointing to right\n","        mid = int(width / 2 * (1 + camera_mid_offset_percent))\n","        x_offset = (left_x2 + right_x2) / 2 - mid\n","\n","    # find the steering angle, which is angle between navigation direction to end of center line\n","    y_offset = int(height / 2)\n","\n","    angle_to_mid_radian = math.atan(x_offset / y_offset)  # angle (in radian) to center vertical line\n","    angle_to_mid_deg = int(angle_to_mid_radian * 180.0 / math.pi)  # angle (in degrees) to center vertical line\n","    steering_angle = angle_to_mid_deg + 90  # this is the steering angle needed by picar front wheel\n","\n","    logging.debug('new steering angle: %s' % steering_angle)\n","    return steering_angle\n","\n","\n","def stabilize_steering_angle(curr_steering_angle, new_steering_angle, num_of_lane_lines, max_angle_deviation_two_lines=5, max_angle_deviation_one_lane=1):\n","    \"\"\"\n","    Using last steering angle to stabilize the steering angle\n","    This can be improved to use last N angles, etc\n","    if new angle is too different from current angle, only turn by max_angle_deviation degrees\n","    \"\"\"\n","    if num_of_lane_lines == 2 :\n","        # if both lane lines detected, then we can deviate more\n","        max_angle_deviation = max_angle_deviation_two_lines\n","    else :\n","        # if only one lane detected, don't deviate too much\n","        max_angle_deviation = max_angle_deviation_one_lane\n","    \n","    angle_deviation = new_steering_angle - curr_steering_angle\n","    if abs(angle_deviation) > max_angle_deviation:\n","        stabilized_steering_angle = int(curr_steering_angle\n","                                        + max_angle_deviation * angle_deviation / abs(angle_deviation))\n","    else:\n","        stabilized_steering_angle = new_steering_angle\n","    logging.info('Proposed angle: %s, stabilized angle: %s' % (new_steering_angle, stabilized_steering_angle))\n","    return stabilized_steering_angle\n","\n","\n","############################\n","# Utility Functions\n","############################\n","def display_lines(frame, lines, line_color=(0, 255, 0), line_width=10):\n","    line_image = np.zeros_like(frame)\n","    if lines is not None:\n","        for line in lines:\n","            for x1, y1, x2, y2 in line:\n","                cv2.line(line_image, (x1, y1), (x2, y2), line_color, line_width)\n","    line_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1)\n","    return line_image\n","\n","\n","def display_heading_line(frame, steering_angle, line_color=(0, 0, 255), line_width=5, ):\n","    heading_image = np.zeros_like(frame)\n","    height, width, _ = frame.shape\n","\n","    # figure out the heading line from steering angle\n","    # heading line (x1,y1) is always center bottom of the screen\n","    # (x2, y2) requires a bit of trigonometry\n","\n","    # Note: the steering angle of:\n","    # 0-89 degree: turn left\n","    # 90 degree: going straight\n","    # 91-180 degree: turn right \n","    steering_angle_radian = steering_angle / 180.0 * math.pi\n","    x1 = int(width / 2)\n","    y1 = height\n","    x2 = int(x1 - height / 2 / math.tan(steering_angle_radian))\n","    y2 = int(height / 2)\n","\n","    cv2.line(heading_image, (x1, y1), (x2, y2), line_color, line_width)\n","    heading_image = cv2.addWeighted(frame, 0.8, heading_image, 1, 1)\n","\n","    return heading_image\n","\n","\n","def length_of_line_segment(line):\n","    x1, y1, x2, y2 = line\n","    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n","\n","\n","def show_image(title, frame, show=_SHOW_IMAGE):\n","    if show:\n","        cv2.imshow(title, frame)\n","\n","\n","def make_points(frame, line):\n","    height, width, _ = frame.shape\n","    slope, intercept = line\n","    y1 = height  # bottom of the frame\n","    y2 = int(y1 * 1 / 2)  # make points from middle of the frame down\n","\n","    # bound the coordinates within the frame\n","    x1 = max(-width, min(2 * width, int((y1 - intercept) / slope)))\n","    x2 = max(-width, min(2 * width, int((y2 - intercept) / slope)))\n","    return [[x1, y1, x2, y2]]\n","\n","\n","############################\n","# Test Functions\n","############################\n","def test_photo(file):\n","    land_follower = HandCodedLaneFollower()\n","    frame = cv2.imread(file)\n","    combo_image = land_follower.follow_lane(frame)\n","    show_image('final', combo_image, True)\n","    cv2.waitKey(0)\n","    cv2.destroyAllWindows()\n","\n","\n","def test_video(video_file):\n","    lane_follower = HandCodedLaneFollower()\n","    cap = cv2.VideoCapture(video_file + '.avi')\n","\n","    # skip first second of video.\n","    for i in range(3):\n","        _, frame = cap.read()\n","\n","    video_type = cv2.VideoWriter_fourcc(*'XVID')\n","    video_overlay = cv2.VideoWriter(\"%s_overlay.avi\" % (video_file), video_type, 20.0, (320, 240))\n","    try:\n","        i = 0\n","        while cap.isOpened():\n","            _, frame = cap.read()\n","            print('frame %s' % i )\n","            combo_image= lane_follower.follow_lane(frame)\n","            \n","            cv2.imwrite(\"%s_%03d_%03d.png\" % (video_file, i, lane_follower.curr_steering_angle), frame)\n","            \n","            cv2.imwrite(\"%s_overlay_%03d.png\" % (video_file, i), combo_image)\n","            video_overlay.write(combo_image)\n","            cv2.imshow(\"Road with Lane line\", combo_image)\n","\n","            i += 1\n","            if cv2.waitKey(1) & 0xFF == ord('q'):\n","                break\n","    finally:\n","        cap.release()\n","        video_overlay.release()\n","        cv2.destroyAllWindows()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O1kW1a97wv3S"},"source":["!cd gdrive/MyDrive/\n","\n","!cp \"*.png\" \"/content/gdrive/MyDrive/laneDetect/\"\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"84k7DyXrxB8O"},"source":["!mv \"/content/t2.mp4_000_095.png\" \"/content/gdrive/MyDrive/laneDetect/\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"21TF1Q5NxlX9","executionInfo":{"status":"ok","timestamp":1606901276960,"user_tz":480,"elapsed":580,"user":{"displayName":"Taylor Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgM9l8HNLHITCZwQrPflxV8sfwATgronfK1LBBvYQ=s64","userId":"08560765622840655618"}},"outputId":"c0773714-866c-438d-c8cd-b4b0f45a282e"},"source":["!ls"],"execution_count":null,"outputs":[{"output_type":"stream","text":["data\t\t    t1.mp4_208_133.png\tt2.mp4_099_094.png  t2.mp4_311_160.png\n","gdrive\t\t    t1.mp4_209_128.png\tt2.mp4_100_099.png  t2.mp4_312_160.png\n","sample_data\t    t1.mp4_210_133.png\tt2.mp4_101_101.png  t2.mp4_313_159.png\n","t1.mp4\t\t    t1.mp4_211_136.png\tt2.mp4_102_106.png  t2.mp4_314_160.png\n","t1.mp4_000_095.png  t1.mp4_212_139.png\tt2.mp4_103_111.png  t2.mp4_315_157.png\n","t1.mp4_001_100.png  t1.mp4_213_134.png\tt2.mp4_104_106.png  t2.mp4_316_152.png\n","t1.mp4_002_095.png  t1.mp4_214_131.png\tt2.mp4_105_101.png  t2.mp4_317_157.png\n","t1.mp4_003_100.png  t1.mp4_215_126.png\tt2.mp4_106_106.png  t2.mp4_318_161.png\n","t1.mp4_004_095.png  t1.mp4_216_131.png\tt2.mp4_107_111.png  t2.mp4_319_158.png\n","t1.mp4_005_090.png  t1.mp4_217_126.png\tt2.mp4_108_116.png  t2.mp4_320_162.png\n","t1.mp4_006_095.png  t1.mp4_218_121.png\tt2.mp4_109_121.png  t2.mp4_321_161.png\n","t1.mp4_007_090.png  t1.mp4_219_126.png\tt2.mp4_110_126.png  t2.mp4_322_157.png\n","t1.mp4_008_090.png  t1.mp4_220_121.png\tt2.mp4_111_131.png  t2.mp4_323_158.png\n","t1.mp4_009_085.png  t1.mp4_221_116.png\tt2.mp4_112_136.png  t2.mp4_324_153.png\n","t1.mp4_010_080.png  t1.mp4_222_111.png\tt2.mp4_113_141.png  t2.mp4_325_148.png\n","t1.mp4_011_075.png  t1.mp4_223_106.png\tt2.mp4_114_146.png  t2.mp4_326_143.png\n","t1.mp4_012_076.png  t1.mp4_224_109.png\tt2.mp4_115_151.png  t2.mp4_327_148.png\n","t1.mp4_013_075.png  t1.mp4_225_111.png\tt2.mp4_116_146.png  t2.mp4_328_150.png\n","t1.mp4_014_070.png  t1.mp4_226_106.png\tt2.mp4_117_151.png  t2.mp4_329_155.png\n","t1.mp4_015_075.png  t1.mp4_227_107.png\tt2.mp4_118_156.png  t2.mp4_330_150.png\n","t1.mp4_016_080.png  t1.mp4_228_112.png\tt2.mp4_119_151.png  t2.mp4_331_145.png\n","t1.mp4_017_075.png  t1.mp4_229_107.png\tt2.mp4_120_156.png  t2.mp4_332_140.png\n","t1.mp4_018_070.png  t1.mp4_230_102.png\tt2.mp4_121_161.png  t2.mp4_333_135.png\n","t1.mp4_019_068.png  t1.mp4_231_101.png\tt2.mp4_122_161.png  t2.mp4_334_140.png\n","t1.mp4_020_063.png  t1.mp4_232_096.png\tt2.mp4_123_156.png  t2.mp4_335_145.png\n","t1.mp4_021_058.png  t1.mp4_233_091.png\tt2.mp4_124_151.png  t2.mp4_336_140.png\n","t1.mp4_022_053.png  t1.mp4_234_086.png\tt2.mp4_125_156.png  t2.mp4_337_137.png\n","t1.mp4_023_058.png  t1.mp4_235_081.png\tt2.mp4_126_160.png  t2.mp4_338_142.png\n","t1.mp4_024_053.png  t1.mp4_236_086.png\tt2.mp4_127_158.png  t2.mp4_339_147.png\n","t1.mp4_025_058.png  t1.mp4_237_091.png\tt2.mp4_128_153.png  t2.mp4_340_142.png\n","t1.mp4_026_053.png  t1.mp4_238_096.png\tt2.mp4_129_158.png  t2.mp4_341_147.png\n","t1.mp4_027_048.png  t1.mp4_239_101.png\tt2.mp4_130_153.png  t2.mp4_342_152.png\n","t1.mp4_028_051.png  t1.mp4_240_096.png\tt2.mp4_131_158.png  t2.mp4_343_147.png\n","t1.mp4_029_046.png  t1.mp4_241_101.png\tt2.mp4_132_153.png  t2.mp4_344_152.png\n","t1.mp4_030_051.png  t1.mp4_242_106.png\tt2.mp4_133_153.png  t2.mp4_345_157.png\n","t1.mp4_031_056.png  t1.mp4_243_111.png\tt2.mp4_134_148.png  t2.mp4_346_152.png\n","t1.mp4_032_061.png  t1.mp4_244_116.png\tt2.mp4_135_153.png  t2.mp4_347_147.png\n","t1.mp4_033_056.png  t1.mp4_245_111.png\tt2.mp4_136_158.png  t2.mp4_348_142.png\n","t1.mp4_034_061.png  t1.mp4_246_116.png\tt2.mp4_137_153.png  t2.mp4_349_137.png\n","t1.mp4_035_059.png  t1.mp4_247_111.png\tt2.mp4_138_158.png  t2.mp4_350_132.png\n","t1.mp4_036_064.png  t1.mp4_248_116.png\tt2.mp4_139_158.png  t2.mp4_351_127.png\n","t1.mp4_037_059.png  t1.mp4_249_111.png\tt2.mp4_140_158.png  t2.mp4_352_122.png\n","t1.mp4_038_064.png  t1.mp4_250_116.png\tt2.mp4_141_153.png  t2.mp4_353_117.png\n","t1.mp4_039_069.png  t1.mp4_251_111.png\tt2.mp4_142_155.png  t2.mp4_354_118.png\n","t1.mp4_040_064.png  t1.mp4_252_106.png\tt2.mp4_143_150.png  t2.mp4_355_113.png\n","t1.mp4_041_059.png  t1.mp4_253_101.png\tt2.mp4_144_145.png  t2.mp4_356_112.png\n","t1.mp4_042_054.png  t1.mp4_254_096.png\tt2.mp4_145_140.png  t2.mp4_357_117.png\n","t1.mp4_043_049.png  t1.mp4_255_091.png\tt2.mp4_146_135.png  t2.mp4_358_112.png\n","t1.mp4_044_053.png  t1.mp4_256_096.png\tt2.mp4_147_140.png  t2.mp4_359_117.png\n","t1.mp4_045_058.png  t1.mp4_257_101.png\tt2.mp4_148_135.png  t2.mp4_360_122.png\n","t1.mp4_046_063.png  t1.mp4_258_101.png\tt2.mp4_149_140.png  t2.mp4_361_127.png\n","t1.mp4_047_058.png  t1.mp4_259_106.png\tt2.mp4_150_135.png  t2.mp4_362_122.png\n","t1.mp4_048_053.png  t1.mp4_260_101.png\tt2.mp4_151_130.png  t2.mp4_363_127.png\n","t1.mp4_049_051.png  t1.mp4_261_096.png\tt2.mp4_152_125.png  t2.mp4_364_132.png\n","t1.mp4_050_049.png  t1.mp4_262_094.png\tt2.mp4_153_120.png  t2.mp4_365_129.png\n","t1.mp4_051_054.png  t1.mp4_263_099.png\tt2.mp4_154_115.png  t2.mp4_366_124.png\n","t1.mp4_052_059.png  t1.mp4_264_104.png\tt2.mp4_155_120.png  t2.mp4_367_119.png\n","t1.mp4_053_064.png  t1.mp4_265_109.png\tt2.mp4_156_121.png  t2.mp4_368_124.png\n","t1.mp4_054_059.png  t1.mp4_266_104.png\tt2.mp4_157_126.png  t2.mp4_369_119.png\n","t1.mp4_055_062.png  t1.mp4_267_101.png\tt2.mp4_158_131.png  t2.mp4_370_114.png\n","t1.mp4_056_067.png  t1.mp4_268_104.png\tt2.mp4_159_136.png  t2.mp4_371_117.png\n","t1.mp4_057_062.png  t1.mp4_269_109.png\tt2.mp4_160_141.png  t2.mp4_372_112.png\n","t1.mp4_058_057.png  t1.mp4_270_114.png\tt2.mp4_161_146.png  t2.mp4_373_107.png\n","t1.mp4_059_052.png  t1.mp4_271_118.png\tt2.mp4_162_151.png  t2.mp4_374_112.png\n","t1.mp4_060_047.png  t1.mp4_272_113.png\tt2.mp4_163_146.png  t2.mp4_375_114.png\n","t1.mp4_061_049.png  t1.mp4_273_108.png\tt2.mp4_164_141.png  t2.mp4_376_109.png\n","t1.mp4_062_044.png  t1.mp4_274_113.png\tt2.mp4_165_136.png  t2.mp4_377_104.png\n","t1.mp4_063_039.png  t1.mp4_275_118.png\tt2.mp4_166_141.png  t2.mp4_378_109.png\n","t1.mp4_064_044.png  t1.mp4_276_113.png\tt2.mp4_167_136.png  t2.mp4_379_114.png\n","t1.mp4_065_044.png  t1.mp4_277_108.png\tt2.mp4_168_141.png  t2.mp4_380_119.png\n","t1.mp4_066_049.png  t1.mp4_278_113.png\tt2.mp4_169_136.png  t2.mp4_381_114.png\n","t1.mp4_067_054.png  t1.mp4_279_108.png\tt2.mp4_170_131.png  t2.mp4_382_109.png\n","t1.mp4_068_049.png  t1.mp4_280_103.png\tt2.mp4_171_126.png  t2.mp4_383_114.png\n","t1.mp4_069_054.png  t1.mp4_281_108.png\tt2.mp4_172_121.png  t2.mp4_384_116.png\n","t1.mp4_070_049.png  t1.mp4_282_112.png\tt2.mp4_173_116.png  t2.mp4_385_111.png\n","t1.mp4_071_044.png  t1.mp4_283_107.png\tt2.mp4_174_121.png  t2.mp4_386_116.png\n","t1.mp4_072_039.png  t1.mp4_284_112.png\tt2.mp4_175_116.png  t2.mp4_387_121.png\n","t1.mp4_073_042.png  t1.mp4_285_107.png\tt2.mp4_176_119.png  t2.mp4_388_126.png\n","t1.mp4_074_038.png  t1.mp4_286_102.png\tt2.mp4_177_114.png  t2.mp4_389_131.png\n","t1.mp4_075_038.png  t1.mp4_287_097.png\tt2.mp4_178_109.png  t2.mp4_390_136.png\n","t1.mp4_076_033.png  t1.mp4_288_102.png\tt2.mp4_179_104.png  t2.mp4_391_141.png\n","t1.mp4_077_029.png  t1.mp4_289_107.png\tt2.mp4_180_099.png  t2.mp4_392_136.png\n","t1.mp4_078_034.png  t1.mp4_290_102.png\tt2.mp4_181_094.png  t2.mp4_393_139.png\n","t1.mp4_079_037.png  t1.mp4_291_099.png\tt2.mp4_182_099.png  t2.mp4_394_144.png\n","t1.mp4_080_038.png  t1.mp4_292_104.png\tt2.mp4_183_094.png  t2.mp4_395_149.png\n","t1.mp4_081_043.png  t1.mp4_293_109.png\tt2.mp4_184_089.png  t2.mp4_396_154.png\n","t1.mp4_082_047.png  t1.mp4_294_114.png\tt2.mp4_185_084.png  t2.mp4_397_153.png\n","t1.mp4_083_052.png  t1.mp4_295_119.png\tt2.mp4_186_089.png  t2.mp4_398_158.png\n","t1.mp4_084_057.png  t1.mp4_296_124.png\tt2.mp4_187_084.png  t2.mp4_399_160.png\n","t1.mp4_085_062.png  t1.mp4_297_119.png\tt2.mp4_188_079.png  t2.mp4_400_160.png\n","t1.mp4_086_057.png  t1.mp4_298_124.png\tt2.mp4_189_074.png  t2.mp4_401_155.png\n","t1.mp4_087_062.png  t1.mp4_299_129.png\tt2.mp4_190_079.png  t2.mp4_402_150.png\n","t1.mp4_088_057.png  t1.mp4_300_134.png\tt2.mp4_191_074.png  t2.mp4_403_145.png\n","t1.mp4_089_052.png  t1.mp4_301_129.png\tt2.mp4_192_070.png  t2.mp4_404_150.png\n","t1.mp4_090_047.png  t1.mp4_302_134.png\tt2.mp4_193_065.png  t2.mp4_405_152.png\n","t1.mp4_091_042.png  t1.mp4_303_139.png\tt2.mp4_194_070.png  t2.mp4_406_157.png\n","t1.mp4_092_047.png  t1.mp4_304_142.png\tt2.mp4_195_075.png  t2.mp4_407_162.png\n","t1.mp4_093_052.png  t1.mp4_305_137.png\tt2.mp4_196_080.png  t2.mp4_408_157.png\n","t1.mp4_094_047.png  t1.mp4_306_132.png\tt2.mp4_197_075.png  t2.mp4_409_152.png\n","t1.mp4_095_052.png  t1.mp4_307_137.png\tt2.mp4_198_070.png  t2.mp4_410_157.png\n","t1.mp4_096_057.png  t1.mp4_308_132.png\tt2.mp4_199_073.png  t2.mp4_411_152.png\n","t1.mp4_097_052.png  t1.mp4_309_133.png\tt2.mp4_200_078.png  t2.mp4_412_147.png\n","t1.mp4_098_047.png  t1.mp4_310_138.png\tt2.mp4_201_083.png  t2.mp4_413_142.png\n","t1.mp4_099_045.png  t1.mp4_311_133.png\tt2.mp4_202_088.png  t2.mp4_414_137.png\n","t1.mp4_100_050.png  t1.mp4_312_128.png\tt2.mp4_203_091.png  t2.mp4_415_136.png\n","t1.mp4_101_045.png  t1.mp4_313_130.png\tt2.mp4_204_086.png  t2.mp4_416_131.png\n","t1.mp4_102_050.png  t1.mp4_314_134.png\tt2.mp4_205_091.png  t2.mp4_417_126.png\n","t1.mp4_103_045.png  t1.mp4_315_139.png\tt2.mp4_206_096.png  t2.mp4_418_121.png\n","t1.mp4_104_040.png  t1.mp4_316_143.png\tt2.mp4_207_101.png  t2.mp4_419_126.png\n","t1.mp4_105_045.png  t1.mp4_317_138.png\tt2.mp4_208_096.png  t2.mp4_420_131.png\n","t1.mp4_106_040.png  t1.mp4_318_133.png\tt2.mp4_209_095.png  t2.mp4_421_136.png\n","t1.mp4_107_045.png  t1.mp4_overlay.avi\tt2.mp4_210_090.png  t2.mp4_422_141.png\n","t1.mp4_108_050.png  t2.mp4\t\tt2.mp4_211_095.png  t2.mp4_423_146.png\n","t1.mp4_109_055.png  t2.mp4_000_095.png\tt2.mp4_212_100.png  t2.mp4_424_141.png\n","t1.mp4_110_058.png  t2.mp4_001_090.png\tt2.mp4_213_105.png  t2.mp4_425_136.png\n","t1.mp4_111_063.png  t2.mp4_002_085.png\tt2.mp4_214_100.png  t2.mp4_426_141.png\n","t1.mp4_112_068.png  t2.mp4_003_090.png\tt2.mp4_215_095.png  t2.mp4_427_146.png\n","t1.mp4_113_063.png  t2.mp4_004_085.png\tt2.mp4_216_090.png  t2.mp4_428_141.png\n","t1.mp4_114_058.png  t2.mp4_005_081.png\tt2.mp4_217_085.png  t2.mp4_429_146.png\n","t1.mp4_115_061.png  t2.mp4_006_086.png\tt2.mp4_218_090.png  t2.mp4_430_141.png\n","t1.mp4_116_056.png  t2.mp4_007_091.png\tt2.mp4_219_085.png  t2.mp4_431_136.png\n","t1.mp4_117_061.png  t2.mp4_008_086.png\tt2.mp4_220_080.png  t2.mp4_432_131.png\n","t1.mp4_118_057.png  t2.mp4_009_087.png\tt2.mp4_221_085.png  t2.mp4_433_136.png\n","t1.mp4_119_052.png  t2.mp4_010_082.png\tt2.mp4_222_090.png  t2.mp4_434_141.png\n","t1.mp4_120_047.png  t2.mp4_011_077.png\tt2.mp4_223_085.png  t2.mp4_435_146.png\n","t1.mp4_121_052.png  t2.mp4_012_082.png\tt2.mp4_224_090.png  t2.mp4_436_151.png\n","t1.mp4_122_057.png  t2.mp4_013_087.png\tt2.mp4_225_085.png  t2.mp4_437_156.png\n","t1.mp4_123_062.png  t2.mp4_014_092.png\tt2.mp4_226_090.png  t2.mp4_438_151.png\n","t1.mp4_124_057.png  t2.mp4_015_087.png\tt2.mp4_227_085.png  t2.mp4_439_156.png\n","t1.mp4_125_052.png  t2.mp4_016_092.png\tt2.mp4_228_080.png  t2.mp4_440_160.png\n","t1.mp4_126_057.png  t2.mp4_017_087.png\tt2.mp4_229_075.png  t2.mp4_441_159.png\n","t1.mp4_127_052.png  t2.mp4_018_092.png\tt2.mp4_230_070.png  t2.mp4_442_159.png\n","t1.mp4_128_047.png  t2.mp4_019_097.png\tt2.mp4_231_065.png  t2.mp4_443_159.png\n","t1.mp4_129_052.png  t2.mp4_020_092.png\tt2.mp4_232_070.png  t2.mp4_444_154.png\n","t1.mp4_130_057.png  t2.mp4_021_097.png\tt2.mp4_233_075.png  t2.mp4_445_159.png\n","t1.mp4_131_062.png  t2.mp4_022_099.png\tt2.mp4_234_080.png  t2.mp4_446_154.png\n","t1.mp4_132_067.png  t2.mp4_023_094.png\tt2.mp4_235_082.png  t2.mp4_447_157.png\n","t1.mp4_133_062.png  t2.mp4_024_099.png\tt2.mp4_236_077.png  t2.mp4_448_159.png\n","t1.mp4_134_067.png  t2.mp4_025_094.png\tt2.mp4_237_072.png  t2.mp4_449_159.png\n","t1.mp4_135_062.png  t2.mp4_026_099.png\tt2.mp4_238_077.png  t2.mp4_450_154.png\n","t1.mp4_136_057.png  t2.mp4_027_094.png\tt2.mp4_239_081.png  t2.mp4_451_149.png\n","t1.mp4_137_062.png  t2.mp4_028_099.png\tt2.mp4_240_076.png  t2.mp4_452_144.png\n","t1.mp4_138_057.png  t2.mp4_029_104.png\tt2.mp4_241_071.png  t2.mp4_453_139.png\n","t1.mp4_139_052.png  t2.mp4_030_109.png\tt2.mp4_242_066.png  t2.mp4_454_134.png\n","t1.mp4_140_057.png  t2.mp4_031_104.png\tt2.mp4_243_071.png  t2.mp4_455_139.png\n","t1.mp4_141_057.png  t2.mp4_032_109.png\tt2.mp4_244_066.png  t2.mp4_456_144.png\n","t1.mp4_142_052.png  t2.mp4_033_114.png\tt2.mp4_245_061.png  t2.mp4_457_139.png\n","t1.mp4_143_057.png  t2.mp4_034_119.png\tt2.mp4_246_066.png  t2.mp4_458_144.png\n","t1.mp4_144_062.png  t2.mp4_035_124.png\tt2.mp4_247_071.png  t2.mp4_459_149.png\n","t1.mp4_145_057.png  t2.mp4_036_119.png\tt2.mp4_248_066.png  t2.mp4_460_154.png\n","t1.mp4_146_062.png  t2.mp4_037_124.png\tt2.mp4_249_071.png  t2.mp4_461_158.png\n","t1.mp4_147_057.png  t2.mp4_038_129.png\tt2.mp4_250_066.png  t2.mp4_462_161.png\n","t1.mp4_148_062.png  t2.mp4_039_124.png\tt2.mp4_251_061.png  t2.mp4_463_158.png\n","t1.mp4_149_067.png  t2.mp4_040_129.png\tt2.mp4_252_066.png  t2.mp4_464_153.png\n","t1.mp4_150_072.png  t2.mp4_041_134.png\tt2.mp4_253_071.png  t2.mp4_465_157.png\n","t1.mp4_151_077.png  t2.mp4_042_139.png\tt2.mp4_254_076.png  t2.mp4_466_152.png\n","t1.mp4_152_082.png  t2.mp4_043_134.png\tt2.mp4_255_081.png  t2.mp4_467_147.png\n","t1.mp4_153_077.png  t2.mp4_044_129.png\tt2.mp4_256_086.png  t2.mp4_468_142.png\n","t1.mp4_154_082.png  t2.mp4_045_124.png\tt2.mp4_257_081.png  t2.mp4_469_137.png\n","t1.mp4_155_087.png  t2.mp4_046_126.png\tt2.mp4_258_086.png  t2.mp4_470_132.png\n","t1.mp4_156_087.png  t2.mp4_047_121.png\tt2.mp4_259_091.png  t2.mp4_471_137.png\n","t1.mp4_157_092.png  t2.mp4_048_126.png\tt2.mp4_260_096.png  t2.mp4_472_142.png\n","t1.mp4_158_097.png  t2.mp4_049_131.png\tt2.mp4_261_092.png  t2.mp4_473_137.png\n","t1.mp4_159_102.png  t2.mp4_050_136.png\tt2.mp4_262_097.png  t2.mp4_474_134.png\n","t1.mp4_160_097.png  t2.mp4_051_131.png\tt2.mp4_263_092.png  t2.mp4_475_129.png\n","t1.mp4_161_102.png  t2.mp4_052_131.png\tt2.mp4_264_097.png  t2.mp4_476_134.png\n","t1.mp4_162_106.png  t2.mp4_053_136.png\tt2.mp4_265_092.png  t2.mp4_477_139.png\n","t1.mp4_163_101.png  t2.mp4_054_141.png\tt2.mp4_266_087.png  t2.mp4_478_144.png\n","t1.mp4_164_106.png  t2.mp4_055_146.png\tt2.mp4_267_092.png  t2.mp4_479_139.png\n","t1.mp4_165_101.png  t2.mp4_056_145.png\tt2.mp4_268_097.png  t2.mp4_480_134.png\n","t1.mp4_166_102.png  t2.mp4_057_140.png\tt2.mp4_269_102.png  t2.mp4_481_139.png\n","t1.mp4_167_097.png  t2.mp4_058_145.png\tt2.mp4_270_097.png  t2.mp4_482_144.png\n","t1.mp4_168_102.png  t2.mp4_059_140.png\tt2.mp4_271_102.png  t2.mp4_483_149.png\n","t1.mp4_169_107.png  t2.mp4_060_140.png\tt2.mp4_272_097.png  t2.mp4_484_144.png\n","t1.mp4_170_112.png  t2.mp4_061_145.png\tt2.mp4_273_092.png  t2.mp4_485_139.png\n","t1.mp4_171_117.png  t2.mp4_062_150.png\tt2.mp4_274_097.png  t2.mp4_486_144.png\n","t1.mp4_172_112.png  t2.mp4_063_145.png\tt2.mp4_275_102.png  t2.mp4_487_149.png\n","t1.mp4_173_117.png  t2.mp4_064_140.png\tt2.mp4_276_107.png  t2.mp4_488_144.png\n","t1.mp4_174_112.png  t2.mp4_065_135.png\tt2.mp4_277_102.png  t2.mp4_489_139.png\n","t1.mp4_175_112.png  t2.mp4_066_140.png\tt2.mp4_278_097.png  t2.mp4_490_134.png\n","t1.mp4_176_107.png  t2.mp4_067_144.png\tt2.mp4_279_092.png  t2.mp4_491_129.png\n","t1.mp4_177_112.png  t2.mp4_068_139.png\tt2.mp4_280_087.png  t2.mp4_492_134.png\n","t1.mp4_178_107.png  t2.mp4_069_144.png\tt2.mp4_281_092.png  t2.mp4_493_139.png\n","t1.mp4_179_112.png  t2.mp4_070_139.png\tt2.mp4_282_087.png  t2.mp4_494_134.png\n","t1.mp4_180_117.png  t2.mp4_071_134.png\tt2.mp4_283_092.png  t2.mp4_495_129.png\n","t1.mp4_181_122.png  t2.mp4_072_139.png\tt2.mp4_284_097.png  t2.mp4_496_134.png\n","t1.mp4_182_127.png  t2.mp4_073_134.png\tt2.mp4_285_102.png  t2.mp4_497_129.png\n","t1.mp4_183_122.png  t2.mp4_074_139.png\tt2.mp4_286_097.png  t2.mp4_498_134.png\n","t1.mp4_184_126.png  t2.mp4_075_134.png\tt2.mp4_287_102.png  t2.mp4_499_129.png\n","t1.mp4_185_121.png  t2.mp4_076_134.png\tt2.mp4_288_107.png  t2.mp4_500_124.png\n","t1.mp4_186_116.png  t2.mp4_077_129.png\tt2.mp4_289_102.png  t2.mp4_501_119.png\n","t1.mp4_187_121.png  t2.mp4_078_124.png\tt2.mp4_290_107.png  t2.mp4_502_124.png\n","t1.mp4_188_116.png  t2.mp4_079_119.png\tt2.mp4_291_112.png  t2.mp4_503_119.png\n","t1.mp4_189_120.png  t2.mp4_080_114.png\tt2.mp4_292_117.png  t2.mp4_504_124.png\n","t1.mp4_190_115.png  t2.mp4_081_119.png\tt2.mp4_293_116.png  t2.mp4_505_129.png\n","t1.mp4_191_110.png  t2.mp4_082_124.png\tt2.mp4_294_121.png  t2.mp4_506_134.png\n","t1.mp4_192_115.png  t2.mp4_083_119.png\tt2.mp4_295_116.png  t2.mp4_507_129.png\n","t1.mp4_193_120.png  t2.mp4_084_114.png\tt2.mp4_296_121.png  t2.mp4_508_134.png\n","t1.mp4_194_115.png  t2.mp4_085_109.png\tt2.mp4_297_126.png  t2.mp4_509_139.png\n","t1.mp4_195_120.png  t2.mp4_086_104.png\tt2.mp4_298_131.png  t2.mp4_510_142.png\n","t1.mp4_196_125.png  t2.mp4_087_104.png\tt2.mp4_299_128.png  t2.mp4_511_144.png\n","t1.mp4_197_129.png  t2.mp4_088_099.png\tt2.mp4_300_133.png  t2.mp4_512_149.png\n","t1.mp4_198_128.png  t2.mp4_089_094.png\tt2.mp4_301_138.png  t2.mp4_513_154.png\n","t1.mp4_199_132.png  t2.mp4_090_089.png\tt2.mp4_302_143.png  t2.mp4_514_149.png\n","t1.mp4_200_137.png  t2.mp4_091_094.png\tt2.mp4_303_138.png  t2.mp4_515_144.png\n","t1.mp4_201_135.png  t2.mp4_092_089.png\tt2.mp4_304_143.png  t2.mp4_516_139.png\n","t1.mp4_202_140.png  t2.mp4_093_094.png\tt2.mp4_305_148.png  t2.mp4_517_134.png\n","t1.mp4_203_145.png  t2.mp4_094_089.png\tt2.mp4_306_153.png  t2.mp4_518_129.png\n","t1.mp4_204_140.png  t2.mp4_095_084.png\tt2.mp4_307_148.png  t2.mp4_519_134.png\n","t1.mp4_205_139.png  t2.mp4_096_079.png\tt2.mp4_308_153.png  t2.mp4_520_129.png\n","t1.mp4_206_134.png  t2.mp4_097_084.png\tt2.mp4_309_154.png\n","t1.mp4_207_138.png  t2.mp4_098_089.png\tt2.mp4_310_158.png\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"h9O6lo99dj8r"},"source":["import cv2\n","import sys\n","import os\n","\n","\n","def save_image_and_steering_angle(video_file):\n","    path = '/content/gdrive/MyDrive/laneDetect/'\n","    lane_follower = HandCodedLaneFollower()\n","    #cap = cv2.VideoCapture(video_file + '.avi')\n","    cap = cv2.VideoCapture(video_file)\n","\n","    try:\n","        i = 0\n","        while cap.isOpened():\n","            _, frame = cap.read()\n","            lane_follower.follow_lane(frame)\n","            cv2.imwrite(os.path.join(path , \"%s_%03d_%03d.png\" % (video_file, i, lane_follower.curr_steering_angle)), frame)\n","            i += 1\n","            if cv2.waitKey(1) & 0xFF == ord('q'):\n","                break\n","    finally:\n","        cap.release()\n","        cv2.destroyAllWindows()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IzQ9JsRxvlUG","executionInfo":{"status":"ok","timestamp":1606900725247,"user_tz":480,"elapsed":680,"user":{"displayName":"Taylor Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgM9l8HNLHITCZwQrPflxV8sfwATgronfK1LBBvYQ=s64","userId":"08560765622840655618"}},"outputId":"a7c5409e-5608-4870-d8a8-1f0c83b48e2f"},"source":["video_file= 't1'\n","i=1\n","t=3\n","path = '/content/gdrive/MyDrive/laneDetect/'\n","print(os.path.join(path , \"%s_%03d_%03d.png\" % (video_file, i, t)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/laneDetect/t1_001_003.png\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t0cWjcq9iqdp"},"source":["import cv2\n","frame = cv2.imread('/content/t1.mp4_000_095.png')\n","hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V-CWb1dxjsjt"},"source":["def detect_edges(frame):\n","    # filter for blue lane lines\n","    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n","    show_image(\"hsv\", hsv)\n","    lower_blue = np.array([60, 40, 40])\n","    upper_blue = np.array([150, 255, 255])\n","    mask = cv2.inRange(hsv, lower_blue, upper_blue)\n","    show_image(\"blue mask\", mask)\n","\n","    # detect edges\n","    edges = cv2.Canny(mask, 200, 400)\n","\n","    return edges"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0R4xegQ6j3Y_"},"source":["edges=detect_edges(frame)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fi55-1g6j2VE"},"source":["def region_of_interest(edges):\n","    height, width = edges.shape\n","    mask = np.zeros_like(edges)\n","\n","    # only focus bottom half of the screen\n","    polygon = np.array([[\n","        (0, height * 1 / 2),\n","        (width, height * 1 / 2),\n","        (width, height),\n","        (0, height),\n","    ]], np.int32)\n","\n","    cv2.fillPoly(mask, polygon, 255)\n","    cropped_edges = cv2.bitwise_and(edges, mask)\n","    return cropped_edges"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SNFCmt0xkB2e"},"source":["cropped_edges = region_of_interest(edges)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uh5rdc2Ukh_n"},"source":["def detect_line_segments(cropped_edges):\n","    # tuning min_threshold, minLineLength, maxLineGap is a trial and error process by hand\n","    rho = 1  # distance precision in pixel, i.e. 1 pixel\n","    angle = np.pi / 180  # angular precision in radian, i.e. 1 degree\n","    min_threshold = 10  # minimal of votes\n","    line_segments = cv2.HoughLinesP(cropped_edges, rho, angle, min_threshold, \n","                                    np.array([]), minLineLength=8, maxLineGap=4)\n","\n","    return line_segments"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gr-yjUgukj15"},"source":["line_segments = detect_line_segments(cropped_edges)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SrDn308Ii4FK"},"source":["def average_slope_intercept(frame, line_segments):\n","    \"\"\"\n","    This function combines line segments into one or two lane lines\n","    If all line slopes are < 0: then we only have detected left lane\n","    If all line slopes are > 0: then we only have detected right lane\n","    \"\"\"\n","    lane_lines = []\n","    if line_segments is None:\n","        logging.info('No line_segment segments detected')\n","        return lane_lines\n","\n","    height, width, _ = frame.shape\n","    left_fit = []\n","    right_fit = []\n","\n","    boundary = 1/3\n","    left_region_boundary = width * (1 - boundary)  # left lane line segment should be on left 2/3 of the screen\n","    right_region_boundary = width * boundary # right lane line segment should be on left 2/3 of the screen\n","\n","    for line_segment in line_segments:\n","        for x1, y1, x2, y2 in line_segment:\n","            if x1 == x2:\n","                logging.info('skipping vertical line segment (slope=inf): %s' % line_segment)\n","                continue\n","            fit = np.polyfit((x1, x2), (y1, y2), 1)\n","            slope = fit[0]\n","            intercept = fit[1]\n","            if slope < 0:\n","                if x1 < left_region_boundary and x2 < left_region_boundary:\n","                    left_fit.append((slope, intercept))\n","            else:\n","                if x1 > right_region_boundary and x2 > right_region_boundary:\n","                    right_fit.append((slope, intercept))\n","\n","    left_fit_average = np.average(left_fit, axis=0)\n","    if len(left_fit) > 0:\n","        lane_lines.append(make_points(frame, left_fit_average))\n","\n","    right_fit_average = np.average(right_fit, axis=0)\n","    if len(right_fit) > 0:\n","        lane_lines.append(make_points(frame, right_fit_average))\n","\n","    logging.debug('lane lines: %s' % lane_lines)  # [[[316, 720, 484, 432]], [[1009, 720, 718, 432]]]\n","\n","    return lane_lines"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JxsX-2jEkxET"},"source":["lane_lines = average_slope_intercept(frame, line_segments)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rcxvkyLNi8Cq"},"source":["\n","def make_points(frame, line):\n","    height, width, _ = frame.shape\n","    slope, intercept = line\n","    y1 = height  # bottom of the frame\n","    y2 = int(y1 * 1 / 2)  # make points from middle of the frame down\n","\n","    # bound the coordinates within the frame\n","    x1 = max(-width, min(2 * width, int((y1 - intercept) / slope)))\n","    x2 = max(-width, min(2 * width, int((y2 - intercept) / slope)))\n","    return [[x1, y1, x2, y2]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HjKpuriBhCFL"},"source":["def detect_lane(frame):\n","    \n","    edges = detect_edges(frame)\n","    cropped_edges = region_of_interest(edges)\n","    line_segments = detect_line_segments(cropped_edges)\n","    lane_lines = average_slope_intercept(frame, line_segments)\n","    \n","    return lane_lines"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WWLsqJWJk-yj"},"source":["lane_lines = detect_lane(frame)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":368},"id":"VdMHtEdYhE95","executionInfo":{"status":"error","timestamp":1606897904466,"user_tz":480,"elapsed":624,"user":{"displayName":"Taylor Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgM9l8HNLHITCZwQrPflxV8sfwATgronfK1LBBvYQ=s64","userId":"08560765622840655618"}},"outputId":"975091e6-bfc3-4e34-c828-3c307af523a2"},"source":["def display_lines(frame, lines, line_color=(0, 255, 0), line_width=2):\n","    line_image = np.zeros_like(frame)\n","    if lines is not None:\n","        for line in lines:\n","            for x1, y1, x2, y2 in line:\n","                cv2.line(line_image, (x1, y1), (x2, y2), line_color, line_width)\n","    line_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1)\n","    return line_image\n","\n","lane_lines_image = display_lines(frame, lane_lines)\n","cv2.imshow(\"lane lines\", lane_lines_image)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"DisabledFunctionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mDisabledFunctionError\u001b[0m                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-d898562bc68c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mlane_lines_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisplay_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlane_lines\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"lane lines\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlane_lines_image\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/_import_hooks/_cv2.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menviron\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menv_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mDisabledFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mDisabledFunctionError\u001b[0m: cv2.imshow() is disabled in Colab, because it causes Jupyter sessions\nto crash; see https://github.com/jupyter/notebook/issues/3935.\nAs a substitution, consider using\n  from google.colab.patches import cv2_imshow\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6qSUJIYTjJ0O","executionInfo":{"status":"ok","timestamp":1606898522418,"user_tz":480,"elapsed":20298,"user":{"displayName":"Taylor Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgM9l8HNLHITCZwQrPflxV8sfwATgronfK1LBBvYQ=s64","userId":"08560765622840655618"}},"outputId":"165fa14f-56b8-4178-b491-6a1beac5ce16"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"6LRihdoRnafL","executionInfo":{"status":"error","timestamp":1606899815735,"user_tz":480,"elapsed":1772,"user":{"displayName":"Taylor Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgM9l8HNLHITCZwQrPflxV8sfwATgronfK1LBBvYQ=s64","userId":"08560765622840655618"}},"outputId":"c083934a-2f27-4be0-c79a-91a615fbb5a9"},"source":[" "],"execution_count":null,"outputs":[{"output_type":"stream","text":["['t1.mp4_130_057.png', 't1.mp4_155_087.png', 't1.mp4_094_047.png', 't1.mp4_201_135.png', 't1.mp4_075_038.png', 't1.mp4_039_069.png', 't1.mp4_249_111.png', 't1.mp4_252_106.png', 't1.mp4_097_052.png', 't1.mp4_137_062.png', 't1.mp4_021_058.png', 't1.mp4_076_033.png', 't1.mp4_238_096.png', 't1.mp4_127_052.png', 't1.mp4_197_129.png', 't1.mp4_154_082.png', 't1.mp4_043_049.png', 't1.mp4_291_099.png', 't1.mp4_146_062.png', 't1.mp4_250_116.png', 't1.mp4_208_133.png', 't1.mp4_091_042.png', 't1.mp4_100_050.png', 't1.mp4_089_052.png', 't1.mp4_152_082.png', 't1.mp4_194_115.png', 't1.mp4_180_117.png', 't1.mp4_292_104.png', 't1.mp4_260_101.png', 't1.mp4_067_054.png', 't1.mp4_294_114.png', 't1.mp4_176_107.png', 't1.mp4_117_061.png', 't1.mp4_026_053.png', 't1.mp4_030_051.png', 't1.mp4_255_091.png', 't1.mp4_244_116.png', 't1.mp4_046_063.png', 't1.mp4_306_132.png', 't1.mp4_165_101.png', 't1.mp4_308_132.png', 't1.mp4_196_125.png', 't1.mp4_303_139.png', 't1.mp4_219_126.png', 't1.mp4_204_140.png', 't1.mp4_138_057.png', 't1.mp4_229_107.png', 't1.mp4_132_067.png', 't1.mp4_220_121.png', 't1.mp4_111_063.png', 't1.mp4_271_118.png', 't1.mp4_120_047.png', 't1.mp4_205_139.png', 't1.mp4_123_062.png', 't1.mp4_243_111.png', 't1.mp4_073_042.png', 't1.mp4_268_104.png', 't1.mp4_270_114.png', 't1.mp4_085_062.png', 't1.mp4_177_112.png', 't1.mp4_227_107.png', 't1.mp4_186_116.png', 't1.mp4_189_120.png', 't1.mp4_254_096.png', 't1.mp4_285_107.png', 't1.mp4_151_077.png', 't1.mp4_298_124.png', 't1.mp4_315_139.png', 't1.mp4_129_052.png', 't1.mp4_174_112.png', 't1.mp4_004_095.png', 't1.mp4_088_057.png', 't1.mp4_145_057.png', 't1.mp4_096_057.png', 't1.mp4_228_112.png', 't1.mp4_038_064.png', 't1.mp4_105_045.png', 't1.mp4_188_116.png', 't1.mp4_232_096.png', 't1.mp4_110_058.png', 't1.mp4_066_049.png', 't1.mp4_206_134.png', 't1.mp4_318_133.png', 't1.mp4_119_052.png', 't1.mp4_086_057.png', 't1.mp4_279_108.png', 't1.mp4_140_057.png', 't1.mp4_148_062.png', 't1.mp4_237_091.png', 't1.mp4_029_046.png', 't1.mp4_193_120.png', 't1.mp4_121_052.png', 't1.mp4_282_112.png', 't1.mp4_031_056.png', 't1.mp4_139_052.png', 't1.mp4_182_127.png', 't1.mp4_044_053.png', 't1.mp4_170_112.png', 't1.mp4_079_037.png', 't1.mp4_273_108.png', 't1.mp4_226_106.png', 't1.mp4_141_057.png', 't1.mp4_118_057.png', 't1.mp4_062_044.png', 't1.mp4_072_039.png', 't1.mp4_163_101.png', 't1.mp4_134_067.png', 't1.mp4_216_131.png', 't1.mp4_101_045.png', 't1.mp4_300_134.png', 't1.mp4_143_057.png', 't1.mp4_275_118.png', 't1.mp4_161_102.png', 't1.mp4_045_058.png', 't1.mp4_023_058.png', 't1.mp4_102_050.png', 't1.mp4_060_047.png', 't1.mp4_037_059.png', 't1.mp4_070_049.png', 't1.mp4_081_043.png', 't1.mp4_103_045.png', 't1.mp4_172_112.png', 't1.mp4_286_102.png', 't1.mp4_192_115.png', 't1.mp4_058_057.png', 't1.mp4_095_052.png', 't1.mp4_034_061.png', 't1.mp4_114_058.png', 't1.mp4_016_080.png', 't1.mp4_064_044.png', 't1.mp4_028_051.png', 't1.mp4_024_053.png', 't1.mp4_187_121.png', 't1.mp4_316_143.png', 't1.mp4_009_085.png', 't1.mp4_264_104.png', 't1.mp4_289_107.png', 't1.mp4_181_122.png', 't1.mp4_012_076.png', 't1.mp4_263_099.png', 't1.mp4_253_101.png', 't1.mp4_184_126.png', 't1.mp4_006_095.png', 't1.mp4_222_111.png', 't1.mp4_225_111.png', 't1.mp4_011_075.png', 't1.mp4_124_057.png', 't1.mp4_080_038.png', 't1.mp4_280_103.png', 't1.mp4_041_059.png', 't1.mp4_171_117.png', 't1.mp4_042_054.png', 't1.mp4_293_109.png', 't1.mp4_092_047.png', 't1.mp4_235_081.png', 't1.mp4_135_062.png', 't1.mp4_082_047.png', 't1.mp4_162_106.png', 't1.mp4_057_062.png', 't1.mp4_295_119.png', 't1.mp4_049_051.png', 't1.mp4_257_101.png', 't1.mp4_018_070.png', 't1.mp4_221_116.png', 't1.mp4_266_104.png', 't1.mp4_299_129.png', 't1.mp4_256_096.png', 't1.mp4_109_055.png', 't1.mp4_317_138.png', 't1.mp4_048_053.png', 't1.mp4_040_064.png', 't1.mp4_087_062.png', 't1.mp4_010_080.png', 't1.mp4_078_034.png', 't1.mp4_296_124.png', 't1.mp4_055_062.png', 't1.mp4_113_063.png', 't1.mp4_239_101.png', 't1.mp4_032_061.png', 't1.mp4_153_077.png', 't1.mp4_136_057.png', 't1.mp4_175_112.png', 't1.mp4_090_047.png', 't1.mp4_213_134.png', 't1.mp4_164_106.png', 't1.mp4_283_107.png', 't1.mp4_052_059.png', 't1.mp4_284_112.png', 't1.mp4_233_091.png', 't1.mp4_302_134.png', 't1.mp4_234_086.png', 't1.mp4_278_113.png', 't1.mp4_107_045.png', 't1.mp4_288_102.png', 't1.mp4_217_126.png', 't1.mp4_083_052.png', 't1.mp4_054_059.png', 't1.mp4_025_058.png', 't1.mp4_224_109.png', 't1.mp4_068_049.png', 't1.mp4_169_107.png', 't1.mp4_047_058.png', 't1.mp4_202_140.png', 't1.mp4_008_090.png', 't1.mp4_069_054.png', 't1.mp4_017_075.png', 't1.mp4_022_053.png', 't1.mp4_209_128.png', 't1.mp4_246_116.png', 't1.mp4_150_072.png', 't1.mp4_065_044.png', 't1.mp4_157_092.png', 't1.mp4_106_040.png', 't1.mp4_310_138.png', 't1.mp4_099_045.png', 't1.mp4_033_056.png', 't1.mp4_077_029.png', 't1.mp4_035_059.png', 't1.mp4_269_109.png', 't1.mp4_125_052.png', 't1.mp4_051_054.png', 't1.mp4_179_112.png', 't1.mp4_241_101.png', 't1.mp4_144_062.png', 't1.mp4_183_122.png', 't1.mp4_210_133.png', 't1.mp4_178_107.png', 't1.mp4_173_117.png', 't1.mp4_207_138.png', 't1.mp4_240_096.png', 't1.mp4_312_128.png', 't1.mp4_133_062.png', 't1.mp4_160_097.png', 't1.mp4_307_137.png', 't1.mp4_313_130.png', 't1.mp4_013_075.png', 't1.mp4_211_136.png', 't1.mp4_074_038.png', 't1.mp4_147_057.png', 't1.mp4_223_106.png', 't1.mp4_248_116.png', 't1.mp4_063_039.png', 't1.mp4_311_133.png', 't1.mp4_056_067.png', 't1.mp4_005_090.png', 't1.mp4_084_057.png', 't1.mp4_158_097.png', 't1.mp4_036_064.png', 't1.mp4_191_110.png', 't1.mp4_116_056.png', 't1.mp4_301_129.png', 't1.mp4_281_108.png', 't1.mp4_166_102.png', 't1.mp4_231_101.png', 't1.mp4_198_128.png', 't1.mp4_190_115.png', 't1.mp4_199_132.png', 't1.mp4_126_057.png', 't1.mp4_156_087.png', 't1.mp4_203_145.png', 't1.mp4_104_040.png', 't1.mp4_276_113.png', 't1.mp4_262_094.png', 't1.mp4_259_106.png', 't1.mp4_218_121.png', 't1.mp4_265_109.png', 't1.mp4_122_057.png', 't1.mp4_236_086.png', 't1.mp4_149_067.png', 't1.mp4_167_097.png', 't1.mp4_014_070.png', 't1.mp4_071_044.png', 't1.mp4_258_101.png', 't1.mp4_251_111.png', 't1.mp4_272_113.png', 't1.mp4_247_111.png', 't1.mp4_059_052.png', 't1.mp4_287_097.png', 't1.mp4_020_063.png', 't1.mp4_007_090.png', 't1.mp4_314_134.png', 't1.mp4_019_068.png', 't1.mp4_242_106.png', 't1.mp4_159_102.png', 't1.mp4_309_133.png', 't1.mp4_200_137.png', 't1.mp4_214_131.png', 't1.mp4_261_096.png', 't1.mp4_053_064.png', 't1.mp4_098_047.png', 't1.mp4_185_121.png', 't1.mp4_215_126.png', 't1.mp4_131_062.png', 't1.mp4_027_048.png', 't1.mp4_195_120.png', 't1.mp4_274_113.png', 't1.mp4_061_049.png', 't1.mp4_267_101.png', 't1.mp4_168_102.png', 't1.mp4_305_137.png', 't1.mp4_297_119.png', 't1.mp4_290_102.png', 't1.mp4_050_049.png', 't1.mp4_304_142.png', 't1.mp4_128_047.png', 't1.mp4_093_052.png', 't1.mp4_277_108.png', 't1.mp4_230_102.png', 't1.mp4_212_139.png', 't1.mp4_108_050.png', 't1.mp4_245_111.png', 't1.mp4_112_068.png', 't1.mp4_142_052.png', 't1.mp4_115_061.png', 't1.mp4_015_075.png']\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-49-fadb60ef3edf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mglob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mglob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'*.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mglob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mglob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'*.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m151\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mg\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'filename' is not defined"]}]}]}